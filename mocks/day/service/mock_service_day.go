// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_dayService is a generated GoMock package.
package mock_dayService

import (
	reflect "reflect"
	dayEntities "sirclo/project-capstone/entities/dayEntities"
	dayRequest "sirclo/project-capstone/utils/request/dayRequest"

	gomock "github.com/golang/mock/gomock"
)

// MockDayServiceInterface is a mock of DayServiceInterface interface.
type MockDayServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDayServiceInterfaceMockRecorder
}

// MockDayServiceInterfaceMockRecorder is the mock recorder for MockDayServiceInterface.
type MockDayServiceInterfaceMockRecorder struct {
	mock *MockDayServiceInterface
}

// NewMockDayServiceInterface creates a new mock instance.
func NewMockDayServiceInterface(ctrl *gomock.Controller) *MockDayServiceInterface {
	mock := &MockDayServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDayServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDayServiceInterface) EXPECT() *MockDayServiceInterfaceMockRecorder {
	return m.recorder
}

// GetDays mocks base method.
func (m *MockDayServiceInterface) GetDays(officeID, date string) ([]dayEntities.Day, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDays", officeID, date)
	ret0, _ := ret[0].([]dayEntities.Day)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDays indicates an expected call of GetDays.
func (mr *MockDayServiceInterfaceMockRecorder) GetDays(officeID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDays", reflect.TypeOf((*MockDayServiceInterface)(nil).GetDays), officeID, date)
}

// GetDaysID mocks base method.
func (m *MockDayServiceInterface) GetDaysID(dayId string) (dayEntities.Day, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaysID", dayId)
	ret0, _ := ret[0].(dayEntities.Day)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaysID indicates an expected call of GetDaysID.
func (mr *MockDayServiceInterfaceMockRecorder) GetDaysID(dayId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaysID", reflect.TypeOf((*MockDayServiceInterface)(nil).GetDaysID), dayId)
}

// UpdateDays mocks base method.
func (m *MockDayServiceInterface) UpdateDays(input dayRequest.DayUpdateRequest) (dayEntities.Day, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDays", input)
	ret0, _ := ret[0].(dayEntities.Day)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDays indicates an expected call of UpdateDays.
func (mr *MockDayServiceInterfaceMockRecorder) UpdateDays(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDays", reflect.TypeOf((*MockDayServiceInterface)(nil).UpdateDays), input)
}
