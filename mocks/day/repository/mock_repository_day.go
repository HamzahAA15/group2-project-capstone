// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_dayRepository is a generated GoMock package.
package mock_dayRepository

import (
	reflect "reflect"
	dayEntities "sirclo/project-capstone/entities/dayEntities"

	gomock "github.com/golang/mock/gomock"
)

// MockDayRepoInterface is a mock of DayRepoInterface interface.
type MockDayRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDayRepoInterfaceMockRecorder
}

// MockDayRepoInterfaceMockRecorder is the mock recorder for MockDayRepoInterface.
type MockDayRepoInterfaceMockRecorder struct {
	mock *MockDayRepoInterface
}

// NewMockDayRepoInterface creates a new mock instance.
func NewMockDayRepoInterface(ctrl *gomock.Controller) *MockDayRepoInterface {
	mock := &MockDayRepoInterface{ctrl: ctrl}
	mock.recorder = &MockDayRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDayRepoInterface) EXPECT() *MockDayRepoInterfaceMockRecorder {
	return m.recorder
}

// GetDayID mocks base method.
func (m *MockDayRepoInterface) GetDayID(dayID string) (dayEntities.Day, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayID", dayID)
	ret0, _ := ret[0].(dayEntities.Day)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDayID indicates an expected call of GetDayID.
func (mr *MockDayRepoInterfaceMockRecorder) GetDayID(dayID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayID", reflect.TypeOf((*MockDayRepoInterface)(nil).GetDayID), dayID)
}

// GetDays mocks base method.
func (m *MockDayRepoInterface) GetDays(office_id, date string) ([]dayEntities.Day, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDays", office_id, date)
	ret0, _ := ret[0].([]dayEntities.Day)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDays indicates an expected call of GetDays.
func (mr *MockDayRepoInterfaceMockRecorder) GetDays(office_id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDays", reflect.TypeOf((*MockDayRepoInterface)(nil).GetDays), office_id, date)
}

// UpdateDay mocks base method.
func (m *MockDayRepoInterface) UpdateDay(day dayEntities.Day) (dayEntities.Day, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDay", day)
	ret0, _ := ret[0].(dayEntities.Day)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDay indicates an expected call of UpdateDay.
func (mr *MockDayRepoInterfaceMockRecorder) UpdateDay(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDay", reflect.TypeOf((*MockDayRepoInterface)(nil).UpdateDay), day)
}
