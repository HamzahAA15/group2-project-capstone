// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_checkInOutRepository is a generated GoMock package.
package mock_checkInOutRepository

import (
	reflect "reflect"
	checkinEntities "sirclo/project-capstone/entities/checkinEntities"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckInOutRepoInterface is a mock of CheckInOutRepoInterface interface.
type MockCheckInOutRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCheckInOutRepoInterfaceMockRecorder
}

// MockCheckInOutRepoInterfaceMockRecorder is the mock recorder for MockCheckInOutRepoInterface.
type MockCheckInOutRepoInterfaceMockRecorder struct {
	mock *MockCheckInOutRepoInterface
}

// NewMockCheckInOutRepoInterface creates a new mock instance.
func NewMockCheckInOutRepoInterface(ctrl *gomock.Controller) *MockCheckInOutRepoInterface {
	mock := &MockCheckInOutRepoInterface{ctrl: ctrl}
	mock.recorder = &MockCheckInOutRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckInOutRepoInterface) EXPECT() *MockCheckInOutRepoInterfaceMockRecorder {
	return m.recorder
}

// CheckData mocks base method.
func (m *MockCheckInOutRepoInterface) CheckData(userID, attendanceID string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckData", userID, attendanceID)
	ret0, _ := ret[0].(int)
	return ret0
}

// CheckData indicates an expected call of CheckData.
func (mr *MockCheckInOutRepoInterfaceMockRecorder) CheckData(userID, attendanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckData", reflect.TypeOf((*MockCheckInOutRepoInterface)(nil).CheckData), userID, attendanceID)
}

// CheckIn mocks base method.
func (m *MockCheckInOutRepoInterface) CheckIn(checkinout checkinEntities.Checkin) (checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIn", checkinout)
	ret0, _ := ret[0].(checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIn indicates an expected call of CheckIn.
func (mr *MockCheckInOutRepoInterfaceMockRecorder) CheckIn(checkinout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIn", reflect.TypeOf((*MockCheckInOutRepoInterface)(nil).CheckIn), checkinout)
}

// CheckOut mocks base method.
func (m *MockCheckInOutRepoInterface) CheckOut(userID string, checkinout checkinEntities.Checkin) (checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOut", userID, checkinout)
	ret0, _ := ret[0].(checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOut indicates an expected call of CheckOut.
func (mr *MockCheckInOutRepoInterfaceMockRecorder) CheckOut(userID, checkinout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOut", reflect.TypeOf((*MockCheckInOutRepoInterface)(nil).CheckOut), userID, checkinout)
}

// CheckRequest mocks base method.
func (m *MockCheckInOutRepoInterface) CheckRequest(attendanceID string) (checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequest", attendanceID)
	ret0, _ := ret[0].(checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequest indicates an expected call of CheckRequest.
func (mr *MockCheckInOutRepoInterfaceMockRecorder) CheckRequest(attendanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequest", reflect.TypeOf((*MockCheckInOutRepoInterface)(nil).CheckRequest), attendanceID)
}

// GetByUser mocks base method.
func (m *MockCheckInOutRepoInterface) GetByUser(userID string) ([]checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", userID)
	ret0, _ := ret[0].([]checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockCheckInOutRepoInterfaceMockRecorder) GetByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockCheckInOutRepoInterface)(nil).GetByUser), userID)
}

// Gets mocks base method.
func (m *MockCheckInOutRepoInterface) Gets() ([]checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets")
	ret0, _ := ret[0].([]checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockCheckInOutRepoInterfaceMockRecorder) Gets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockCheckInOutRepoInterface)(nil).Gets))
}
