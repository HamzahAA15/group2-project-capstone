// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_checkInsOutsService is a generated GoMock package.
package mock_checkInsOutsService

import (
	reflect "reflect"
	checkinEntities "sirclo/project-capstone/entities/checkinEntities"
	checkInsOutsRequest "sirclo/project-capstone/utils/request/checkInsOutsRequest"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckinoutServiceInterface is a mock of CheckinoutServiceInterface interface.
type MockCheckinoutServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCheckinoutServiceInterfaceMockRecorder
}

// MockCheckinoutServiceInterfaceMockRecorder is the mock recorder for MockCheckinoutServiceInterface.
type MockCheckinoutServiceInterfaceMockRecorder struct {
	mock *MockCheckinoutServiceInterface
}

// NewMockCheckinoutServiceInterface creates a new mock instance.
func NewMockCheckinoutServiceInterface(ctrl *gomock.Controller) *MockCheckinoutServiceInterface {
	mock := &MockCheckinoutServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCheckinoutServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckinoutServiceInterface) EXPECT() *MockCheckinoutServiceInterfaceMockRecorder {
	return m.recorder
}

// CheckData mocks base method.
func (m *MockCheckinoutServiceInterface) CheckData(userID, attendanceID string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckData", userID, attendanceID)
	ret0, _ := ret[0].(int)
	return ret0
}

// CheckData indicates an expected call of CheckData.
func (mr *MockCheckinoutServiceInterfaceMockRecorder) CheckData(userID, attendanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckData", reflect.TypeOf((*MockCheckinoutServiceInterface)(nil).CheckData), userID, attendanceID)
}

// CheckRequest mocks base method.
func (m *MockCheckinoutServiceInterface) CheckRequest(attendanceID string) (checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequest", attendanceID)
	ret0, _ := ret[0].(checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequest indicates an expected call of CheckRequest.
func (mr *MockCheckinoutServiceInterfaceMockRecorder) CheckRequest(attendanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequest", reflect.TypeOf((*MockCheckinoutServiceInterface)(nil).CheckRequest), attendanceID)
}

// Checkin mocks base method.
func (m *MockCheckinoutServiceInterface) Checkin(input checkInsOutsRequest.CheckInsRequest) (checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkin", input)
	ret0, _ := ret[0].(checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkin indicates an expected call of Checkin.
func (mr *MockCheckinoutServiceInterfaceMockRecorder) Checkin(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkin", reflect.TypeOf((*MockCheckinoutServiceInterface)(nil).Checkin), input)
}

// Checkout mocks base method.
func (m *MockCheckinoutServiceInterface) Checkout(userID string, input checkInsOutsRequest.CheckOutsRequest) (checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", userID, input)
	ret0, _ := ret[0].(checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout.
func (mr *MockCheckinoutServiceInterfaceMockRecorder) Checkout(userID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockCheckinoutServiceInterface)(nil).Checkout), userID, input)
}

// GetByUser mocks base method.
func (m *MockCheckinoutServiceInterface) GetByUser(userID string) ([]checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", userID)
	ret0, _ := ret[0].([]checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockCheckinoutServiceInterfaceMockRecorder) GetByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockCheckinoutServiceInterface)(nil).GetByUser), userID)
}

// Gets mocks base method.
func (m *MockCheckinoutServiceInterface) Gets() ([]checkinEntities.Checkin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets")
	ret0, _ := ret[0].([]checkinEntities.Checkin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockCheckinoutServiceInterfaceMockRecorder) Gets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockCheckinoutServiceInterface)(nil).Gets))
}
