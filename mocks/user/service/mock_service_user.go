// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_userService is a generated GoMock package.
package mock_userService

import (
	reflect "reflect"
	userEntities "sirclo/project-capstone/entities/userEntities"
	userRequest "sirclo/project-capstone/utils/request/userRequest"

	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceInterface) CreateUser(input userRequest.CreateUserInput) (userEntities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", input)
	ret0, _ := ret[0].(userEntities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceInterfaceMockRecorder) CreateUser(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceInterface)(nil).CreateUser), input)
}

// GetUser mocks base method.
func (m *MockUserServiceInterface) GetUser(id string) (userEntities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(userEntities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceInterfaceMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUser), id)
}

// LoginUserService mocks base method.
func (m *MockUserServiceInterface) LoginUserService(input userRequest.LoginUserInput) (userEntities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUserService", input)
	ret0, _ := ret[0].(userEntities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUserService indicates an expected call of LoginUserService.
func (mr *MockUserServiceInterfaceMockRecorder) LoginUserService(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserService", reflect.TypeOf((*MockUserServiceInterface)(nil).LoginUserService), input)
}

// UpdateUser mocks base method.
func (m *MockUserServiceInterface) UpdateUser(id string, input userRequest.UpdateUserInput) (userEntities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, input)
	ret0, _ := ret[0].(userEntities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceInterfaceMockRecorder) UpdateUser(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceInterface)(nil).UpdateUser), id, input)
}

// UploadAvatarUser mocks base method.
func (m *MockUserServiceInterface) UploadAvatarUser(id, imageURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatarUser", id, imageURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatarUser indicates an expected call of UploadAvatarUser.
func (mr *MockUserServiceInterfaceMockRecorder) UploadAvatarUser(id, imageURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatarUser", reflect.TypeOf((*MockUserServiceInterface)(nil).UploadAvatarUser), id, imageURL)
}
